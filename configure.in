#
# autoconf input for Objective Caml programs
# Modified by the lablgtk2 development team
# Original copyright (C) 2001 Jean-Christophe Filliâtre
#   from a first script by Georges Mariano 
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file LGPL).

# the script generated by autoconf from this input will set the following
# variables:
#   OCAMLC        "ocamlc" if present in the path, or a failure
#                 or "ocamlc.opt" if present with same version number as ocamlc
#   OCAMLOPT      "ocamlopt" (or "ocamlopt.opt" if present), or "no"
#   OCAMLBEST     either "byte" if no native compiler was found, 
#                 or "opt" otherwise
#   OCAMLDEP      "ocamldep"
#   OCAMLLEX      "ocamllex" (or "ocamllex.opt" if present)
#   OCAMLYACC     "ocamlyac"
#   OCAMLLIB      the path to the ocaml standard library
#   OCAMLVERSION  the ocaml version number
#   OCAMLWIN32    "yes"/"no" depending on Sys.os_type = "Win32"
#   EXE           ".exe" if OCAMLWIN32=yes, "" otherwise

# check for one particular file of the sources 
# ADAPT THE FOLLOWING LINE TO YOUR SOURCES!
AC_INIT(src/gtk.ml)

# Check for Ocaml compilers

# we first look for ocamlc in the path; if not present, we fail
AC_CHECK_PROG(CAMLC,ocamlc,ocamlc,no)
if test "$CAMLC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlc.)
fi

# we extract Ocaml version number and library path
OCAMLVERSION=`$CAMLC -version`
echo "ocaml version is $OCAMLVERSION"
OCAMLLIB=`$CAMLC -where`
echo "ocaml library path is $OCAMLLIB"
LIBDIR=$OCAMLLIB

AC_ARG_WITH(libdir,
	[  --with-libdir=/path     install libs in /path/lablgtk2 and /path/stublibs],
	LIBDIR=$withval
	echo "Install dirs are : $LIBDIR/lablgtk2 and $LIBDIR/stublibs"
	echo "	Compile with 
		ocamlc -I $LIBDIR/lablgtk2 
	and add $LIBDIR/stublibs either to OCAMLLIB/ld.conf or 
	to CAML_LD_LIBRARY_PATH", 
	echo "Default install dirs are : $LIBDIR/lablgtk2 and $LIBDIR/stublibs"
	echo "Compile with ocamlc -I +lablgtk2" 
	)

# then we look for ocamlopt; if not present, we issue a warning
# if the version is not the same, we also discard it
# we set OCAMLBEST to "opt" or "byte", whether ocamlopt is available or not
AC_CHECK_PROG(CAMLOPT,ocamlopt,ocamlopt,no)
OCAMLBEST=byte
if test "$CAMLOPT" = no ; then
	AC_MSG_WARN(Cannot find ocamlopt; bytecode compilation only.)
else
	AC_MSG_CHECKING(ocamlopt version)
	TMPVERSION=`$CAMLOPT -version`
	if test "$TMPVERSION" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt discarded.)
	    CAMLOPT=no
	else
	    AC_MSG_RESULT(ok)
	    OCAMLBEST=opt
	fi
fi

# checking for ocamlc.opt
AC_CHECK_PROG(OCAMLCDOTOPT,ocamlc.opt,ocamlc.opt,no)
if test "$OCAMLCDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVERSION=`$OCAMLCDOTOPT -version`
	if test "$TMPVERSION" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlc.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    CAMLC=$OCAMLCDOTOPT
	fi
fi

# checking for ocamlopt.opt
if test "$CAMLOPT" != no ; then
    AC_CHECK_PROG(OCAMLOPTDOTOPT,ocamlopt.opt,ocamlopt.opt,no)
    if test "$OCAMLOPTDOTOPT" != no ; then
	AC_MSG_CHECKING(ocamlc.opt version)
	TMPVER=`$OCAMLOPTDOTOPT -version`
	if test "$TMPVER" != "$OCAMLVERSION" ; then
	    AC_MSG_RESULT(differs from ocamlc; ocamlopt.opt discarded.)
	else
	    AC_MSG_RESULT(ok)
	    CAMLOPT=$OCAMLOPTDOTOPT
	fi
    fi
fi

# ocamlrun, ocamldep, ocamllex and ocamlyacc should also be present in the path
AC_CHECK_PROG(OCAMLRUN,ocamlrun,ocamlrun,no)
if test "$OCAMLRUN" = no ; then
	AC_MSG_ERROR(Cannot find ocamlrun.)
fi

AC_CHECK_PROG(OCAMLDEP,ocamldep,ocamldep,no)
if test "$OCAMLDEP" = no ; then
	AC_MSG_ERROR(Cannot find ocamldep.)
fi

AC_CHECK_PROG(OCAMLDOC,ocamldoc,ocamldoc,no)
if test "$OCAMLDOC" = no ; then
	AC_MSG_RESULT(Cannot find ocamldoc.)
fi

AC_CHECK_PROG(OCAMLLEX,ocamllex,ocamllex,no)
if test "$OCAMLLEX" = no ; then
    AC_MSG_ERROR(Cannot find ocamllex.)
else
    AC_CHECK_PROG(OCAMLLEXDOTOPT,ocamllex.opt,ocamllex.opt,no)
    if test "$OCAMLLEXDOTOPT" != no ; then
	OCAMLLEX=$OCAMLLEXDOTOPT
    fi
fi

AC_CHECK_PROG(OCAMLYACC,ocamlyacc,ocamlyacc,no)
if test "$OCAMLYACC" = no ; then
	AC_MSG_ERROR(Cannot find ocamlyacc.)
fi

AC_CHECK_PROG(CAMLMKTOP,ocamlmktop,ocamlmktop,no)
if test "$CAMLMKTOP" = no ; then
	AC_MSG_ERROR(Cannot find ocamlmktop.)
fi

AC_CHECK_PROG(CAMLMKLIB,ocamlmklib,ocamlmklib,no)
if test "$CAMLMKLIB" = no ; then
	AC_MSG_ERROR(Cannot find ocamlmklib.)
fi

AC_CHECK_PROG(CAMLP4O,camlp4o,camlp4o,no)
if test "$CAMLP4O" = no ; then
	AC_MSG_ERROR(Cannot find camlp4o.)
fi

if expr "$OCAMLVERSION" '>=' '3.08' > /dev/null ; then
   ODOC_DEF="-D OCAML_308"
fi
AC_SUBST(ODOC_DEF)

# Check for which kind of threads is used
THREADS_LIB="no"
AC_MSG_CHECKING(for ocaml threads)
if test -r $OCAMLLIB/threads/stdlib.cma; then
  THREADS_LIB="byte"
elif test -r $OCAMLLIB/threads/threads.cma; then
  THREADS_LIB="system"
fi
AC_MSG_RESULT($THREADS_LIB)
# Check for dll support
HAS_DLL_SUPPORT="no"
AC_MSG_CHECKING(for ocaml dll support)
if test -r $OCAMLLIB/stublibs/dllunix.so ||
   test -r $OCAMLLIB/stublibs/dllunix.dll
then HAS_DLL_SUPPORT="yes"
fi
AC_MSG_RESULT($HAS_DLL_SUPPORT)

AC_PROG_RANLIB
# get the C compiler used by ocamlc
if test -z "$CC" ; then
  touch conftest.c
  CC=$($CAMLC -verbose -c conftest.c 2>&1 | sed ['s/^+ \([^ ]*\) .*$/\1/'])
  echo [OCaml uses $CC to compile C files]
fi
AC_PROG_CC

# platform
AC_MSG_CHECKING(platform)
echo "print_endline Sys.os_type ;;" > conftest.ml
ac_ocaml_platform=$(ocaml conftest.ml)
AC_MSG_RESULT($ac_ocaml_platform)
if test $ac_ocaml_platform = Win32 ; then
    OCAMLWIN32=yes
    EXE=.exe
else
    OCAMLWIN32=no
    EXE=
fi

# GTK 2 auto configuration

GTKPKG=gtk+-2.0 
AM_PATH_GTK_2_0()

PKG_CHECK_MODULES(GTK,$GTKPKG)

FORCE_GL=no
AC_ARG_WITH(gl, 
        [  --without-gl            override autodetected GtkGLArea support. Requires LablGL],
	USE_GL=$withval; FORCE_GL=yes;,
	USE_GL=yes)
AC_ARG_WITH(lablGL-dir,[  --with-lablGL-dir=DIR	  specify location of lablGL],
        LABLGLDIR="$withval")

if test $USE_GL = yes ; then
      AC_MSG_CHECKING(lablGL directory)
      cat > conftest.ml << EOF
      open Raw
EOF
      if $CAMLC -c -I "${LABLGLDIR:=+lablGL}" conftest.ml > /dev/null 2>&1 ; then
        AC_MSG_RESULT($LABLGLDIR)
      else
        if test $FORCE_GL = yes ; then
	  AC_MSG_ERROR(gtkgl enforced but lablGL not found)
	else
	  AC_MSG_RESULT(no)
      	  USE_GL=no
          unset LABLGLDIR
	fi
      fi
fi
if test $USE_GL = yes ; then
	PKG_CHECK_MODULES(GTKGL,gtkgl-2.0,,
	if test $FORCE_GL = yes ; then
	AC_MSG_ERROR(gtkgl enforced but support not found)
	else
	AC_MSG_RESULT(no)
	USE_GL=no
	fi)
fi
if test $USE_GL = yes ; then
    USE_GL=1
    GTKGLPKG=gtkgl-2.0
else
    USE_GL=
fi

FORCE_GLADE=no
AC_ARG_WITH(glade, 
        [  --without-glade         override autodetected libglade support],
	USE_GLADE=$withval; FORCE_GLADE=yes;,
	USE_GLADE=yes)

if test $USE_GLADE = yes ; then
	PKG_CHECK_MODULES(GLADE,libglade-2.0,,
	if test $FORCE_GLADE = yes ; then
	AC_MSG_ERROR(libglade enforced but no support found)
	else
	AC_MSG_RESULT(no)
	USE_GLADE=no
	fi)
fi
if test $USE_GLADE = yes ; then
    USE_GLADE=1
    GLADEPKG=libglade-2.0
else
    USE_GLADE=
fi

FORCE_RSVG=no
AC_ARG_WITH(rsvg, [  --without-rsvg          override autodetected librsvg support],
	USE_RSVG=$withval; FORCE_RSVG=yes;,
	USE_RSVG=yes)

if test $USE_RSVG = yes ; then
    	PKG_CHECK_MODULES(RSVG,librsvg-2.0,,
	if test $FORCE_RSVG = yes ; then
	AC_MSG_ERROR(librsvg enforced but support not found)
	else
	AC_MSG_RESULT(no)
	USE_RSVG=no
	fi)
fi
if test $USE_RSVG = yes ; then
    USE_RSVG=1
    RSVGPKG=librsvg-2.0
    LIBS=$RSVG_LIBS
    AC_CHECK_FUNC(rsvg_handle_new_gz, [HAVE_SVGZ=-DHAVE_SVGZ], [HAVE_SVGZ=])
else
    USE_RSVG=
    HAVE_SVGZ=
fi


FORCE_GNOMECANVAS=no
AC_ARG_WITH(gnomecanvas,
        [  --without-gnomecanvas   override autodetected libgnomecanvas support],
	USE_GNOMECANVAS=$withval ; FORCE_GNOMECANVAS=yes,
	USE_GNOMECANVAS=yes)

if test $USE_GNOMECANVAS = yes ; then
    PKG_CHECK_MODULES(GNOMECANVAS,libgnomecanvas-2.0,,
	if test $FORCE_GNOMECANVAS = yes ; then
	AC_MSG_ERROR(libgnomecanvas enforced but support not found)
	else
	AC_MSG_RESULT(no)
	USE_GNOMECANVAS=no
	fi)
fi
if test $USE_GNOMECANVAS = yes ; then
    USE_GNOMECANVAS=1
    GNOMECANVASPKG=libgnomecanvas-2.0
else
    USE_GNOMECANVAS=
fi

FORCE_GNOMEUI=no
AC_ARG_WITH(gnomeui,
        [  --without-gnomeui   override autodetected libgnomeui support],
	USE_GNOMEUI=$withval ; FORCE_GNOMEUI=yes,
	USE_GNOMEUI=yes)

if test $USE_GNOMEUI = yes ; then
    PKG_CHECK_MODULES(GNOMEUI,libgnomeui-2.0,,
	if test $FORCE_GNOMEUI = yes ; then
	AC_MSG_ERROR(libgnomeui enforced but support not found)
	else
	AC_MSG_RESULT(no)
	USE_GNOMEUI=no
	fi)
fi
if test $USE_GNOMEUI = yes ; then
    USE_GNOMEUI=1
    GNOMEUIPKG=libgnomeui-2.0
else
    USE_GNOMEUI=
fi


FORCE_PANEL=no
AC_ARG_WITH(panel,
        [  --without-panel     override autodetected libpanelapplet support],
	USE_PANEL=$withval ; FORCE_PANEL=yes,
	USE_PANEL=yes)

if test $USE_PANEL = yes ; then
    PKG_CHECK_MODULES(PANEL,libpanelapplet-2.0,,
	if test $FORCE_PANEL = yes ; then
	AC_MSG_ERROR(libpanel-applet enforced but support not found)
	else
	AC_MSG_RESULT(no)
	USE_PANEL=no
	fi)
fi
if test $USE_PANEL = yes ; then
    USE_PANEL=1
    PANELPKG=libpanelapplet-2.0
else
    USE_PANEL=
fi

PKG_CHECK_MODULES(GTKALL,$GTKPKG $GTKGLPKG $GLADEPKG $RSVGPKG $GNOMECANVASPKG $GNOMEUIPKG $PANELPKG)

AC_ARG_ENABLE(debug,
        [  --enable-debug          enable debug mode],
	echo "Debug mode enabled" ; DEBUG=1,
	DEBUG=)

# substitutions to perform

AC_SUBST(EXE)
AC_SUBST(LIBDIR)
AC_SUBST(OCAMLBEST)
AC_SUBST(OCAMLWIN32)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLRUN)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
AC_SUBST(THREADS_LIB)
AC_SUBST(HAS_DLL_SUPPORT)

AC_SUBST(CAMLC)
AC_SUBST(CAMLOPT)
AC_SUBST(OCAMLDOC)
AC_SUBST(CAMLMKTOP)
AC_SUBST(CAMLMKLIB)
AC_SUBST(CAMLP4O)
AC_SUBST(LABLGLDIR)
AC_SUBST(USE_GL)
AC_SUBST(USE_GNOME)
AC_SUBST(USE_GLADE)
AC_SUBST(USE_RSVG)
AC_SUBST(HAVE_SVGZ)
AC_SUBST(USE_GNOMECANVAS)
AC_SUBST(USE_GNOMEUI)
AC_SUBST(USE_PANEL)
AC_SUBST(USE_CC)
AC_SUBST(DEBUG)			  

# Finally create the config.make from config.make.in
AC_OUTPUT(config.make)
chmod a-w config.make

AC_DEFUN(CONF_SUMMARY, [
echo -n "	$1	"
if test -n "$USE_$2"
then echo "yes"
else if test "$FORCE_$2" = "yes"
     then echo "disabled"
     else echo "not found"
     fi
fi])

echo ; echo "LablGTK configuration:"
CONF_SUMMARY(GtkGLArea, GL)
CONF_SUMMARY(libglade, GLADE)
CONF_SUMMARY(librsvg , RSVG)
CONF_SUMMARY(libgnomecanvas, GNOMECANVAS)
CONF_SUMMARY(libgnomeui, GNOMEUI)
CONF_SUMMARY(libpanelapplet, PANEL)
echo
echo -n  "	debug   	"
if test -n "$DEBUG" ; then echo "yes" ; else echo "no" ; fi
echo -e  "	C compiler	$CC"
